Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии.

У Git есть три основных состояния, в которых могут находиться ваши файлы: изменён (modified), индексирован (staged) и зафиксирован (committed):
К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы.
Индексированный — это изменённый файл в его текущей версии, отмеченный для включения в следующий коммит.
Зафиксированный значит, что файл уже сохранён в вашей локальной базе.

если указана опция --global, то эти настройки достаточно сделать только один раз, 
поскольку в этом случае Git будет использовать эти данные для всего, что вы делаете в этой системе

Индекс в Git — это специальная промежуточная область, в которой хранятся изменения файлов на пути от рабочей директории до репозитория.


.gitignore - файл с перечислением шаблонов автоматически генерируемых файлов(различные логи, результаты сборки программ и т. п.)

$ git init
Эта команда создаёт в текущем каталоге новый подкаталог с именем .git, 
содержащий все необходимые файлы репозитория — структуру Git репозитория.

a. git add		добавляет существующие файлы в индекс        начать отслеживать (добавить под версионный контроль) новый файл
b. git status		инструмент, используемый для определения, какие файлы в каком состоянии находятся 
c. git commit -m ""	сохраняете состояние своего проекта в Git
   git commit --amend "забывает" про текущий коммит, берёт тот же коммит на котором был основан старый*, делает поверх него* новый коммит, учитывая содержимое индекса** и переносит ветку на получившийся результат

d. git clone <url>	получает копию существующего Git-репозитория
e. git pull / git push  чтобы автоматически получить изменения из удалённой ветки и слить их со своей текущей
   git push <remote-name> <branch-name>	Отправка изменений в удаленный репозиторий

Выполнение git pull, как правило, извлекает (fetch) данные с сервера, с которого вы изначально клонировали, и автоматически пытается слить (merge) их с кодом, над которым вы в данный момент работаете

f. git fetch получить изменения, которые есть у Полa????, но нету у вас ( команда связывается с указанным удалённым проектом и забирает все те данные проекта, которых у вас ещё нет)
g. git init Чтобы превратить обычный каталог в Git репозиторий и начать версионировать файлы в нём
h. git config Если вы не хотите печатать каждую команду для Git целиком, вы легко можете настроить псевдонимы (alias) для любой команды
                                                   git config --global alias.ci commit
a. git branch  — это своего рода "менеджер веток". Она умеет перечислять ваши ветки, создавать новые, удалять и переименовывать их
b. git merge  слияние веток
1. git stash   используется для временного сохранения всех незафиксированных изменений с целью очистки рабочего каталога без необходимости фиксировать незавершённую работу в текущей ветке
2. git reset HEAD <file>... для исключения из индекса
   git restore --staged <file>...  -//-
   git restore <file>...


3. git revert создаёт новый коммит, который вносит изменения, противоположные указанному коммиту, по существу отменяя его
4. git rebase  выполняется для цепочки коммитов, перенося ветку на новое место


5. git checkout -- [file] Любые изменения соответствующего файла пропадают — вы просто копируете поверх него другой файл
   git checkout 
   git diff отвечает на два вопроса: что вы изменили, но ещё не проиндексировали, 
				     и что вы проиндексировали и собираетесь включить в коммит
   git rm удаляет файл из вашего рабочего каталога, так что в следующий раз вы не увидите его как «неотслеживаемый» (удаляется и не отслеживается)
   git rm --cached README удаляется из индекса, но в рабочем каталоге сохраняется
   git mv file_from file_to переименовать файл	
   git log выводит в обратном хронологическом порядке список сохраненных в данный репозиторий версий.
   git remote чтобы просмотреть список настроенных удалённых репозиториев
   git remote add <shortname> <url>  Для того, чтобы добавить удалённый репозиторий и присвоить ему имя (shortname)
Если хотите получить побольше информации об одном из удалённых репозиториев, вы можете использовать команду git remote show <remote>
   git tag  перечисляет теги в алфавитном порядке; порядок их отображения не имеет существенного значения.
   git tag -l "v1.8.5*" поиск тега по шаблону
   git tag -a v1.4 -m "my version 1.4" Создание аннотированного тега 
   git tag v1.4-lw   Создание легковестного тега (без аргументов -a, -m...)
   git push origin <tagname> отправляет тег явно на удалённый сервер
   git tag -d <tagname> для удаления тегов
   git diff используется для вычисления разницы между любыми двумя Git деревьями
   HEAD это указатель на текущую локальную ветку
   Ветвление означает, что вы отклоняетесь от основной линии разработки и продолжаете работу, не вмешиваясь в основную линию
   
   GitLab — веб-инструмент жизненного цикла DevOps с открытым исходным кодом, 
   представляющий систему управления репозиториями кода для Git с собственной вики, системой отслеживания ошибок, CI/CD пайплайном и другими функциями
   